{
  "swagger": "2.0",
  "info": {
    "title": "HIP API",
    "description": "A RESTful API for Medical Teams International's Health Information Program (HIP).",
    "version": "1.0.0"
  },
  "produces": [
    "application/json"
  ],
  "host": "clinicwebapp.azurewebsites.net",
  "basePath": "/hip",
  "paths": {
    "/visits": {
      "post": {
        "summary": "Add visit",
        "description": "Adds a new patient visit.  This operation takes a JSON visit objects and persists it to the MTI HIP data store.  The service responds with the posted visit with two differences:  1) the visit.status will be set to ('1' if successfully uploaded, '2' if the visit was not processed because it already has been, '4' if the device associated with the visit post has not been activated, '3' if the visit failed to process for any other reason).  The service augments the visit with a visit.key property generated from the visit's deviceId and visitDate.",
        "x-swagger-router-controller": "Visit",
        "tags": [
          "Visit"
        ],
        "operationId": "postVisit",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/visit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "visit reference response",
            "schema": {
              "$ref": "#/definitions/visit"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/visits/upload": {
      "post": {
        "summary": "Upload visits",
        "description": "Upload an array of visits.  This operation takes a JSON array of visit objects and persists them to the MTI HIP data store.  The service responds with the posted array of visits with two differences:  1) the visit.status will be set to ('1' if successfully uploaded, '2' if the visit was not processed because it already has been, '4' if the device associated with the visit post has not been activated, '3' if the visit failed to process for any other reason).  The service augments the visit with a visit.key property generated from the visit's deviceId and visitDate.",
        "x-swagger-router-controller": "Visit",
        "tags": [
          "Visit"
        ],
        "operationId": "postVisits",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/visitUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "visit reference response",
            "schema": {
              "$ref": "#/definitions/visitUpload"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "summary": "Get registered devices",
        "description": "Returns an array devices that have registered the HIP app.",
        "x-swagger-router-controller": "Device",
        "tags": [
          "Device"
        ],
        "operationId": "getAllDevices",
        "responses": {
          "200": {
            "description": "devices response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/device"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/devices/{uuid}": {
      "get": {
        "summary": "Get registered device",
        "description": "Returns the specified device if registered with the HIP app.",
        "x-swagger-router-controller": "Device",
        "tags": [
          "Device"
        ],
        "operationId": "getDevice",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The identity for the device.  Probably a MAC address or serial number.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "devices response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/device"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "put": {
        "summary": "put device",
        "description": "Adds or updates information about a device",
        "x-swagger-router-controller": "Device",
        "tags": [
          "Device"
        ],
        "operationId": "putDevice",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The identity for the device.  Probably a MAC address or serial number.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "visit reference response",
            "schema": {
              "$ref": "#/definitions/device"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/facilities/{facilityId}/visits": {
      "get": {
        "summary": "Get facility visits",
        "description": "Returns an array of links to patient visits to the specified facility",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "getVisitsByFacility",
        "parameters": [
          {
            "name": "facilityId",
            "in": "path",
            "description": "ID of facility to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "visit references response",
            "schema": {
              "$ref": "#/definitions/visitReference"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Add visit",
        "description": "Adds a new patient Visit for the facility",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "postVisitAtFacility",
        "parameters": [
          {
            "name": "facilityId",
            "in": "path",
            "description": "ID of facility where the Visit took place",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/visit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "visit reference response",
            "schema": {
              "$ref": "#/definitions/visitReference"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/facilities/{facilityId}/visits/upload": {
      "post": {
        "summary": "Upload visits",
        "description": "Upload an array of visits.  This operation will add them all.",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "postVisitsAtFacility",
        "parameters": [
          {
            "name": "facilityId",
            "in": "path",
            "description": "ID of facility where the Visit took place",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/visitUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "visit reference response",
            "schema": {
              "$ref": "#/definitions/visitReference"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/facilities/{facilityId}/visits/{visitKey}": {
      "get": {
        "summary": "get Visit",
        "description": "Returns a visit based on a single visit Key",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "getVisit",
        "parameters": [
          {
            "name": "facilityId",
            "in": "path",
            "description": "ID of the Facility for which a visit will be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "visitKey",
            "in": "path",
            "description": "Key of the Visit to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "visit response",
            "schema": {
              "$ref": "#/definitions/visit"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/facilities": {
      "get": {
        "summary": "",
        "description": "The Facilities endpoint returns the list of all MTI Facilities that are currently registered with the API.",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "getAllFacilities",
        "parameters": [
          {
            "name": "settlement",
            "in": "query",
            "description": "ID of a settlement.  Will filter facilities by that settlement.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "facilities response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/facility"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/facilities/{facilityId}": {
      "get": {
        "summary": "",
        "description": "Returns a facility based on a single ID",
        "x-swagger-router-controller": "Facility",
        "tags": [
          "Facility"
        ],
        "operationId": "getFacilityById",
        "parameters": [
          {
            "name": "facilityId",
            "in": "path",
            "description": "ID of facility to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "facility response",
            "schema": {
              "$ref": "#/definitions/facility"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/settlements": {
      "get": {
        "summary": "",
        "description": "The Settlements endpoint returns the list of all MTI Settlements that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getAllSettlements",
        "responses": {
          "200": {
            "description": "settlements response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/settlement"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/settlements/{settlement}/facilities": {
      "get": {
        "summary": "Settlement facilities",
        "description": "Returns the list of all MTI Facilities for the Settlement that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getFacilitiesBySettlement",
        "parameters": [
          {
            "name": "settlement",
            "in": "path",
            "description": "Name of settlement to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "facilities response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/facility"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/citizenships": {
      "get": {
        "summary": "Citizenship Lookup List",
        "description": "The Citizenship endpoint returns the list of all Citizenships that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getAllCitizenships",
        "responses": {
          "200": {
            "description": "citizenship response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/citizenship"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/injurylocations": {
      "get": {
        "summary": "Injury Location Lookup List",
        "description": "The injurylocation endpoint returns the list of all injury locations that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getAllInjuryLocations",
        "responses": {
          "200": {
            "description": "injury locations response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/injurylocation"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/diagnosis": {
      "get": {
        "summary": "Diagnosis Lookup List",
        "description": "The Diagnosis endpoint returns the list of all Diagnosis that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getAllDiagnosis",
        "responses": {
          "200": {
            "description": "diagnosis response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosis"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/diagnosis/{diagnosisId}": {
      "get": {
        "summary": "Diagnosis",
        "description": "Returns a diagnosis based on a single ID",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getDiagnosisById",
        "parameters": [
          {
            "name": "diagnosisId",
            "in": "path",
            "description": "ID of diagnosis to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "diagnosis response",
            "schema": {
              "$ref": "#/definitions/diagnosis"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/diagnosis/{diagnosisId}/supplementals": {
      "get": {
        "summary": "Supplementals of Diagnosis",
        "description": "Returns an array of supplementals for the diagnosis",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getSupplementalsByDiagnosis",
        "parameters": [
          {
            "name": "diagnosisId",
            "in": "path",
            "description": "ID of diagnosis for the supplementals to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "supplementals response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/supplemental"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/supplementals": {
      "get": {
        "summary": "Supplementals lookup list",
        "description": "The Supplementals endpoint returns the list of all diagnosis Supplementals that are currently registered with the API.",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getAllSupplementals",
        "parameters": [
          {
            "name": "diagnosis",
            "in": "query",
            "description": "ID of a diagnosis.  Will filter supplementals by that diagnosis.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "supplementals response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/supplemental"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    },
    "/supplementals/{supplementalId}": {
      "get": {
        "summary": "Supplemental",
        "description": "Returns a supplemental based on a single ID",
        "x-swagger-router-controller": "Lookup",
        "tags": [
          "Lookup"
        ],
        "operationId": "getSupplementalById",
        "parameters": [
          {
            "name": "supplementalId",
            "in": "path",
            "description": "ID of supplemental to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "supplemental response",
            "schema": {
              "$ref": "#/definitions/supplemental"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "facility": {
      "description": "A medical facility",
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Reference identity for this facility",
          "$ref": "#/definitions/id"
        },
        "name": {
          "description": "The name of this facility",
          "type": "string"
        },
        "settlement": {
          "description": "The settlement where this facility is located",
          "type": "string"
        },
        "country": {
          "description": "The country where this facility is located",
          "type": "string"
        },
        "region": {
          "description": "The region where this facility is located",
          "type": "string"
        }
      }
    },
    "settlement": {
      "description": "A Refugee settlement",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name by which the settlement is known.  Also used as the Reference identity for this settlement",
          "type": "string"
        },
        "country": {
          "description": "The Country where the settlement is located",
          "type": "string"
        },
        "region": {
          "description": "The Region where the settlement is located",
          "type": "string"
        },
        "facilityCount": {
          "description": "The number of facilities at this settlement",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "citizenship": {
      "description": "The citizenship status of an individual",
      "type": "object",
      "required": [
        "id",
        "level"
      ],
      "properties": {
        "id": {
          "description": "Reference identity for this citizenship status",
          "$ref": "#/definitions/id"
        },
        "level": {
          "description": "Descriptive label for this citizenship status",
          "type": "string"
        }
      }
    },
    "device": {
      "description": "A specific mobile device (e.g. Joe's IPhone) used to run the HIP mobile app",
      "type": "object",
      "required": [
        "appVersion"
      ],
      "properties": {
        "uuid": {
          "description": "A sequence of characters that uniquely identifies this device",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the HIP application installed on this device",
          "type": "string"
        },
        "description": {
          "description": "A descriptive name for this device.",
          "type": "string"
        },
        "facility": {
          "description": "Identifies the facility at which this device is registered",
          "$ref": "#/definitions/id"
        }
      }
    },
    "injurylocation": {
      "description": "A geographic location where an injury was occurs",
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Reference identity for this location",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Textual description of the location",
          "type": "string"
        }
      }
    },
    "diagnosis": {
      "description": "Represents one diagnosis for a patient",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "description": "The name for this diagnosis",
          "type": "string"
        },
        "supplementals": {
          "description": "Some diagnosis can be extended or clarified by providing supplemental information.  This identifies the set of supplemental information that is appropriate for this diagnosis.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/supplemental"
          }
        }
      }
    },
    "supplemental": {
      "description": "Supplemental information used to to extend or clarify a diagnosis",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "description": "The name of this supplemental information",
          "type": "string"
        }
      }
    },
    "visitReference": {
      "type": "object",
      "required": [
        "id",
        "url"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "visitUpload": {
      "description": "A collection of visits for upload",
      "type": "array",
      "items": {
        "$ref": "#/definitions/visit"
      }
    },
    "visit": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "Identifies the facility that the patient visited",
          "$ref": "#/definitions/id"
        },
        "staffMemberName": {
          "description": "The name of the person who handled the patient visit",
          "type": "string"
        },
        "gender": {
          "description": "The patient's gender.  The current reporting system only recognizes 'M' or 'F' as valid.",
          "type": "string"
        },
        "beneficiaryType": {
          "description": "The citizenship status of the patient",
          "$ref": "#/definitions/id"
        },
        "patientAgeMonthsLow": {
          "description": "The lower end of the age range of the patient in months",
          "type": "number",
          "format": "double"
        },
        "isRevisit": {
          "description": "True if this visit is a 'revisit'",
          "type": "boolean"
        },
        "OPD": {
          "description": "Identifies the OPD entry associated with this visit",
          "type": "integer",
          "format": "int64"
        },
        "visitDate": {
          "description": "The timestamp of the visit in the form YYYY-MM-DDThh:mm:ss.000+HHMM ",
          "type": "string"
        },
        "deviceId": {
          "description": "Used to uniquely identify the device used to post this visit.  This will be device-specific, but usually a MAC address or serial number.",
          "type": "string"
        },
        "injuryLocation": {
          "description": "Identifies the location at which injuries were receiving in association with an Injury diagnosis ",
          "$ref": "#/definitions/id"
        },
        "stiContactsTreated": {
          "description": "The number of patient contacts treated in association with an STI diagnosis",
          "type": ["integer", "null"],
          "format": "int64"
        },
        "status": {
          "description": "Represents the status of the processing of this patient visit.  Please refer to the visit service for the meanings of the values in this field.",
          "type": "integer",
          "format": "int64"
        },
        "patientDiagnosis": {
          "description": "The set of diagnosis for this patient during this visit",
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosis"
          }
        }
      }
    },
    "id": {
      "description": "An Integer value used to uniquely identify a resource",
      "type": "integer",
      "format": "int64"
    },
    "errorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}
